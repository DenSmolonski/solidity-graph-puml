@startuml
  class DamnValuableNFT {
            import @openzeppelin/contracts/token/ERC721/ERC721.sol
import @openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol
import solady/src/auth/OwnableRoles.sol
            uint256 MINTER_ROLE
uint256 tokenIdCounter
            constructor() : void
safeMint(address) : uint256
        }
class DamnValuableToken {
            import solmate/src/tokens/ERC20.sol
            
            constructor() : void
        }
class DamnValuableTokenSnapshot {
            import @openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol
            uint256 _lastSnapshotId
            constructor(uint256) : void
snapshot() : uint256
getBalanceAtLastSnapshot(address) : uint256
getTotalSupplyAtLastSnapshot() : uint256
        }
class ReceiverUnstoppable {
            import @openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol
import solmate/src/auth/Owned.sol
import ../unstoppable/UnstoppableVault.sol
            undefined pool
            constructor(address) : void
onFlashLoan(address, address, uint256, uint256, bytes) : bytes32
executeFlashLoan(uint256) : void
        }
class UnstoppableVault {
            import solmate/src/utils/FixedPointMathLib.sol
import solmate/src/utils/ReentrancyGuard.sol
import solmate/src/mixins/ERC4626.sol
import solmate/src/auth/Owned.sol
import @openzeppelin/contracts/interfaces/IERC3156.sol
            uint256 FEE_FACTOR
uint64 GRACE_PERIOD
uint64 end
address feeRecipient
            constructor(, address, address) : void
maxFlashLoan(address) : uint256
flashFee(address, uint256) : uint256
setFeeRecipient(address) : void
totalAssets() : uint256
flashLoan(, address, uint256, bytes) : bool
beforeWithdraw(uint256, uint256) : void
afterDeposit(uint256, uint256) : void
        }
@enduml